package com.example.cloud.service;

import com.example.cloud.model.User;

import java.util.Optional;

/**
 * Интерфейс сервиса аутентификации пользователей.
 * Определяет методы для входа, выхода, проверки токенов и получения информации о пользователе.
 * Все методы предназначены для работы с моделью {@link User} и её вложенными классами.
 */
public interface AuthService {

    /**
     * Аутентификация пользователя по учетным данным.
     * Проверяет переданные логин и пароль, возвращает токен авторизации при успешной аутентификации.
     *
     * @param credentials Учетные данные пользователя ({@link User.Credentials}), содержащие логин и пароль.
     *                    Не должно быть null.
     * @return Объект {@link User.Token} с токеном авторизации.
     * @throws IllegalArgumentException если учетные данные неверны или пользователь не найден.
     */
    User.Token login(User.Credentials credentials);

    /**
     * Завершение сессии пользователя.
     * Сбрасывает токен авторизации для указанной сессии, завершая её.
     *
     * @param token Токен авторизации в виде {@link Optional<String>}. Может быть пустым, если токен отсутствует.
     * @throws IllegalArgumentException если токен недействителен или отсутствует (в зависимости от реализации).
     */
    void logout(Optional<String> token);

    /**
     * Получение пользователя по токену авторизации.
     * Используется для проверки сессии или получения данных о текущем пользователе.
     *
     * @param token Токен авторизации в виде {@link Optional<String>}. Может быть пустым, если токен не предоставлен.
     * @return {@link Optional<User>} с найденным пользователем или пустой, если пользователь не найден.
     */
    Optional<User> getUserByToken(Optional<String> token);

    /**
     * Проверка валидности токена авторизации.
     * Определяет, связан ли токен с активной сессией пользователя.
     *
     * @param token Токен авторизации в виде строки. Может быть null или пустым, что считается невалидным.
     * @return {@code true}, если токен валиден и связан с пользователем, {@code false} в противном случае.
     */
    Boolean validateToken(String token);
}